{
  "en": {
    "logo_data": "Portfolio website",
    "title_data": "Software Developer",
    "subtitle_data": "Artem Ryzhenkov",
    "description_data": "Experienced Python developer with a strong background in testing and DevOps practices.",
    "skills_button_data": "Skills",
    "work_experience_button_data": "Work Experience",
    "details_button_data": "Details",
    "education_button_data": "Education",
    "projects_button_data": "Projects",
    "contact_button_data": "Contacts",

    "achievements_title_data": "Achievements üèÜ",
    "skills_title_data": "Skills",
    "work_experience_title_data": "Work Experience",
    "projects_title_data": "Projects",
    "education_title_data": "Education",
    "contact_title_data": "Contacts",

    "skills_description_data": "‚óè Python 2.7/3.10 (more than 5 years of experience) ‚óè Java, Groovy ‚óè SQL (PostgreSQL, SQLite) \n ‚óè RabbitMQ, Redis ‚óè Linux/UNIX ‚óè Docker/Docker Compose/Docker Swarm \n ‚óè Jenkins/TeamCity/GitLab CICD ‚óè Robot Framework ‚óè Allure TestOps/TestRail",

    "company_7_title_data": "LLC ¬´Wildberries¬ª",
    "company_7_period_data": "Position: Head of QA. \n Duration: November 2024 - Present.",
    "company_7_details_general_data": "‚û§ Development of testing and quality assurance processes in a large area of ‚Äã‚Äãthe company \n ‚û§ Management of a team of 25 quality control specialists \n ‚û§ Training and transfer of experience to employees \n ‚û§ Discussion with product teams of individual development of testing for their product \n ‚û§ Conducting interviews \n ‚û§ Development and support of frameworks and infrastructure for automated testing",
    "company_7_details_achievements_data": "÷ç Formed a team of quality control specialists from scratch. \n ÷ç Built and set up (previously there was no QA as a role) testing and quality control processes in a department of 450+ employees and 110+ products from scratch. \n ÷ç Implemented an innovative approach to providing testing as a service to product teams. \n ÷ç Created 3 frameworks for writing automated tests for API (pytests), UI (pytests + playwright), a framework for checking the execution of DB stored procedures (pytests), also created a framework for LOAD load testing (locust), set up a CI/CD process with custom libraries, Vault support and posting test results to Allure TestOps and Allure Docker Service",

    "company_6_title_data": "LLC ¬´Wildberries¬ª",
    "company_6_period_data": "Position: Software Development Engineer in Test (SDET) Lead. \n Duration: –ú–∞–π 2024 - –ù–æ—è–±—Ä—å 2024.",
    "company_6_details_general_data": "‚û§ Developing autotesting frameworks from scratch \n ‚û§ Leading and managing the development team (SDET Load Team) \n ‚û§ Deploying and maintaining the test environment infrastructure \n ‚û§ Developing telegram bots \n ‚û§ Developing a web service for data visualization \n ‚û§ Conducting technical interviews \n ‚û§ Onboarding autotesters \n",
    "company_6_details_achievements_data": "÷ç Successfully developed from scratch and implemented into teams an API autotesting framework (python + pytest + endpoint generator based on OpenAPI contracts, launching subprocesses via invoke) \n ÷ç Developed a UI autotesting framework (python + playwright + pytest, launching subprocesses via invoke) \n ÷ç Promoted to Head of QA \n",

    "company_5_title_data": "JSC ¬´Nexign¬ª",
    "company_5_period_data": "Position: Software Engineer. \n Duration: July 2022 - May 2024.",
    "company_5_details_general_data": "‚û§ Development of a web service for providing business reports (django, django ORM, postgreSQL, pandas, celery, API integration) \n ‚û§ Support/development of a web service with presentations (django, pandas, API) \n ‚û§ Enhancement/creation of various-purpose Telegram bots (chat participant control, monitoring, notifications, etc.), for both internal corporate use and external clients (postgreSQL, django, python-telegram-bot) \n ‚û§ Creation of Jenkins pipelines in groovy (DSL), working with TeamCity pipelines \n ‚û§ Utilization of Docker and docker-compose \n ‚û§ System administration of automation service operations \n ‚û§ Writing automated tests (Robot Framework, pytest, unittests, mocks) \n ‚û§ Maintenance (code reviews in python, Robot Framework, groovy).",
    "company_5_details_achievements_data": "÷ç Successful project implementation within budgetary timelines for the migration of Yota subscribers and business processes from the old billing system to the new \"Megafon\": working with Jenkins pipelines, Robot Framework automated tests, and Django reports \n ÷ç Development and implementation of a service for generating Python code based on the OpenAPI specification, reducing production incidents through automatic API updates, and reducing Time to Market (TTM) by 1.5 times through code generation in an open pull request by the team \n ÷ç Development and integration of a bot into the Bitbucket version control system for automating pull request checks, reducing Time to Market (TTM) by 2 times \n ÷ç Implementation of a corporate news Telegram bot for MegaFon employees \n ÷ç Product segmentation for the automated testing of mobile operator tariffs into separate components, allowing for a reduction in time and cost for deployment and maintenance.",

    "company_4_title_data": "LLC ¬´Storm Technologies¬ª",
    "company_4_period_data": "Position: Automated Testing Specialist. \n Duration: May 2022 - June 2022.\n Transfer to the head company AO \"Nexign\" with a promotion in position.",
    "company_4_details_general_data": "‚û§ Development of automated UAT tests (python, Robot Framework) \n ‚û§ Preparation and updating of test documentation (TestRail, markdown) \n ‚û§ Maintenance of existing automated tests, bug fixing \n ‚û§ Development of accompanying scripts (python)",
    "company_4_details_achievements_data": "÷ç Transfer to the head office with a promotion",

    "company_3_title_data": "LLC ¬´Nordavind-Dubna¬ª",
    "company_3_period_data": "Position: Automation Testing Intern. \n Duration: September 2021 - October 2021.",
    "company_3_details_general_data": "‚û§ Software testing for video surveillance cameras (smoke testing, functional, load, regression, automated) on Debian and Windows operating systems \n ‚û§ Updating unit tests in Python 2.7 (architecture based on CORBA, omniORB) \n ‚û§ Writing accompanying scripts in Python 3 (parsers, generators) \n ‚û§ Developing testing plans and methodologies, analyzing obtained results, and compiling reports \n ‚û§ Keeping test cases up-to-date in TestRail \n ‚û§ Communicating with developers \n ‚û§ Compiling defect reports in Redmine.",

    "company_2_title_data": "LLC ¬´Smartsoft¬ª",
    "company_2_period_data": "Position: Manual Testing Intern.\n Duration: August 2021 - September 2021.",
    "company_2_details_general_data": "‚û§ Testing of web-B2G projects (functional, regression, automated (API tests in Postman)) \n ‚û§ API testing (REST, SOAP) based on documentation using Swagger, Postman, SoapUI \n ‚û§ Testing of web products using tools such as Graylog, Sentry, OpenShift Web Console, DBeaver (PostgreSQL database) \n ‚û§ Verification for compliance with XML Schema and documentation in XMLSpy \n ‚û§ Communication with developers \n ‚û§ Creating bug reports in Jira \n ‚û§ Compilation of acceptance documentation",
    "company_2_details_achievements_data": "",

    "company_1_title_data": "LLC ¬´Hopper IT¬ª",
    "company_1_period_data": "Position: Monitoring Group Specialist.\n Duration: April 2021 - August 2021.",
    "company_1_details_general_data": "‚û§ Round-the-clock monitoring of the correct operation of various Information Systems (B2G, B2B, B2C) using automated tests launched through Jenkins, and infrastructure (Zabbix, Grafana) \n ‚û§ Configuration of the Jenkins-Zabbix integration \n ‚û§ In case of issues with Information Systems, escalation to the system administrator, task creation in Jira, logging, and writing incident resolution in the Service Desk system \n ‚û§ Configuration and monitoring setup for automated tests in Jenkins \n ‚û§ Verification of API requests using Postman \n ‚û§ Script writing in Python 3 (selenium, requests, urllib3)",

    "project_1_description_data": "Verification Service for Django-based Layout Compliance Using Neural Networks.",
    "project_2_description_data": "Manager for managing automated Telegram bots with ChatGPT support.",
    "project_3_description_data": "Automated trading bot on the Steam platform.",
    "education_description_data": "2021-2023: Dubna State University, Institute of Systems Analysis and Control (ISAC).\n Major - ¬´System Analysis and Management¬ª, specialization - ¬´Digital Platforms and Big Data Analytics¬ª (with honors).\n\n 2017-2021: Dubna State University, Faculty of Natural and Engineering Sciences (FNES).\nMajor - ¬´Ecology and Environmental Management¬ª, specialization - ¬´Geoecology¬ª.",
    "contact_description_data": "Work e-mail: RyzhenkovArt@yandex.ru \n Telegram: @RyzhenkovAD",

    "footer_data": "¬© 2024 Artem Ryzhenkov. All rights reserved."

  },
  "ru": {
    "logo_data": "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
    "title_data": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
    "subtitle_data": "–ê—Ä—Ç–µ–º –†—ã–∂–µ–Ω–∫–æ–≤",
    "description_data": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ Python c –∫—Ä–µ–ø–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö DevOps.",
    "skills_button_data": "–ù–∞–≤—ã–∫–∏",
    "work_experience_button_data": "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
    "details_button_data": "–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
    "education_button_data": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "projects_button_data": "–ü—Ä–æ–µ–∫—Ç—ã",
    "contact_button_data": "–ö–æ–Ω—Ç–∞–∫—Ç—ã",

    "achievements_title_data": "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ",
    "skills_title_data": "–ù–∞–≤—ã–∫–∏",
    "work_experience_title_data": "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
    "projects_title_data": "–ü—Ä–æ–µ–∫—Ç—ã",
    "education_title_data": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "contact_title_data": "–ö–æ–Ω—Ç–∞–∫—Ç—ã",

    "skills_description_data": "‚óè Python 2.7/3.10 (–±–æ–ª—å—à–µ 5-x –ª–µ—Ç –æ–ø—ã—Ç–∞) ‚óè Java, Groovy ‚óè SQL (PostgreSQL, SQLite) \n ‚óè RabbitMQ, Redis ‚óè Linux/UNIX ‚óè Docker/Docker Compose/Docker Swarm \n ‚óè Jenkins/TeamCity/GitLab CICD ‚óè Robot Framework ‚óè Allure TestOps/TestRail",

    "company_7_title_data": "OOO ¬´–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑¬ª",
    "company_7_period_data": "–î–æ–ª–∂–Ω–æ—Å—Ç—å: Head of QA. \n –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ù–æ—è–±—Ä—å 2024 - –ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è.",
    "company_7_details_general_data": "‚û§ –†–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –∫—Ä—É–ø–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ \n ‚û§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ 25 —á–µ–ª–æ–≤–µ–∫ \n ‚û§ –û–±—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –æ–ø—ã—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º \n ‚û§ –û–±—Å—É–∂–¥–µ–Ω–∏–µ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞ \n ‚û§ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π \n ‚û§ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
    "company_7_details_achievements_data": "÷ç –° –Ω—É–ª—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞. \n ÷ç –° –Ω—É–ª—è –ø–æ—Å—Ç—Ä–æ–∏–ª, –Ω–∞–ª–∞–¥–∏–ª (—Ä–∞–Ω–µ–µ –¥–∞–∂–µ –Ω–µ –±—ã–ª–æ QA –∫–∞–∫ —Ä–æ–ª–∏) –ø—Ä–æ—Ü–µ—Å—Å—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –æ—Ç–¥–µ–ª–µ –∏–∑ 450+ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ 110+ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. \n ÷ç –í–Ω–µ–¥—Ä–∏–ª –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ —É—Å–ª—É–≥–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–º –∫–æ–º–∞–Ω–¥–∞–º. \n ÷ç –°–æ–∑–¥–∞–ª 3 —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –¥–ª—è API (pytests), UI (pytests + playwright), —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–º—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä DB (pytests), —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–ª —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LOAD (locust), –Ω–∞–ª–∞–¥–∏–ª –ø—Ä–æ—Ü–µ—Å—Å CI/CD —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ª–∏–±–∞–º–∏, –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Vault –∏ –≤—ã–∫–ª–∞–¥–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Allure TestOps –∏ Allure Docker Service",

    "company_6_title_data": "OOO ¬´–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑¬ª",
    "company_6_period_data": "–î–æ–ª–∂–Ω–æ—Å—Ç—å: Software Development Engineer in Test (SDET) Lead. \n –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ú–∞–π 2024 - –ù–æ—è–±—Ä—å 2024.",
    "company_6_details_general_data": "‚û§ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å –Ω—É–ª—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è \n ‚û§ –õ–µ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–ö–æ–º–∞–Ω–¥–∞ SDET Load) \n ‚û§ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è \n ‚û§ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–æ–≤ \n ‚û§ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ –ø–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö \n ‚û§ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π \n ‚û§ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤",
    "company_6_details_achievements_data": "÷ç –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª —Å –Ω—É–ª—è –∏ –≤–Ω–µ–¥—Ä–∏–ª –≤ –∫–æ–º–∞–Ω–¥—ã —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API (python + pytest + –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ OpenAPI-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤, –∑–∞–ø—É—Å–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —á–µ—Ä–µ–∑ invoke) \n ÷ç –†–∞–∑—Ä–∞–±–æ—Ç–∞–ª —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UI (python + playwright + pytest, –∑–∞–ø—É—Å–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —á–µ—Ä–µ–∑ invoke) \n ÷ç –ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ Head of QA",

    "company_5_title_data": "AO ¬´–ù—ç–∫—Å–∞–π–Ω¬ª",
    "company_5_period_data": "–î–æ–ª–∂–Ω–æ—Å—Ç—å: –ò–Ω–∂–µ–Ω–µ—Ä-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç.\n –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ò—é–ª—å 2022 - –ú–∞–π 2024.",
    "company_5_details_general_data": "‚û§ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ (django, django ORM, postgreSQL, pandas, celery, —Ä–∞–±–æ—Ç–∞ c API) \n ‚û§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞/—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ c –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º–∏ (django, pandas, API) \n ‚û§ –î–æ—Ä–∞–±–æ—Ç–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–∫–æ–Ω—Ç—Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä.), –∫–∞–∫ –¥–ª—è –≤–Ω—É—Ç—Ä–∏–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, —Ç–∞–∫ –∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ (postgreSQL, django, python-telegram-bot) \n ‚û§ –°–æ–∑–¥–∞–Ω–∏–µ Jenkins –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –Ω–∞ groovy (DSL), —Ä–∞–±–æ—Ç–∞ c –ø–∞–π–ø–ª–∞–π–Ω–∞–º–∏ TeamCity \n ‚û§ –†–∞–±–æ—Ç–∞ c docker –∏ docker-compose \n ‚û§ –°–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ \n ‚û§ –ù–∞–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ (Robot Framework, pytest, unittests, –º–æ–∫–∏) \n ‚û§ –ú–µ–π–Ω—Ç–µ–π–Ω–µ—Ä—Å—Ç–≤–æ (—Ä–µ–≤—å—é –∫–æ–¥–∞ –Ω–∞ python, Robot Framework, goovy)",
    "company_5_details_achievements_data": "÷ç –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ –±—é–¥–∂–µ—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Yota –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∏–ª–ª–∏–Ω–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ–≤—É—é \"–ú–µ–≥–∞—Ñ–æ–Ω\": —Ä–∞–±–æ—Ç–∞ —Å –ø–∞–π–ø–ª–∞–π–Ω–∞–º–∏ Jenkins, –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞–º–∏ Robot Framework, –æ—Ç—á–µ—Ç–∞–º–∏ –Ω–∞ Django \n ÷ç –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ python-–∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–Ω–∏–∑–∏–≤—à–µ–µ –∞–≤–∞—Ä–∏–π–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –∑–∞ —Å—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ API, –∞ —Ç–∞–∫–∂–µ —Å–æ–∫—Ä–∞—Ç–∏–≤—à–µ–µ TTM 1,5 —Ä–∞–∑–∞ –∑–∞ —Å—á–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ \n ÷ç –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ Bitbucket –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–æ–≤, —Å–æ–∫—Ä–∞—Ç–∏–≤—à–µ–µ TTM (Time to Market) –≤ 2 —Ä–∞–∑–∞ \n ÷ç –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –æ–±—â–µ–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ \"–ú–µ–≥–∞—Ñ–æ–Ω\" \n ÷ç –†–∞–∑–±–∏–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–∞—Ä–∏—Ñ–æ–≤ —Å–æ—Ç–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –ø–æ–∑–≤–æ–ª–∏–≤—à–µ–µ —Å–Ω–∏–∑–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏ –Ω–∞ –µ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ",
    
    "company_4_title_data": "OOO ¬´–®—Ç–æ—Ä–º –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏¬ª",
    "company_4_period_data": "–î–æ–ª–∂–Ω–æ—Å—Ç—å: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. \n –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ú–∞–π 2022 - –ò—é–Ω—å 2022.\n –ü–µ—Ä–µ–≤–æ–¥ –≤ –≥–æ–ª–æ–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é AO ¬´–ù—ç–∫—Å–∞–π–Ω¬ª c –ø–æ–≤—ã—à–µ–Ω–∏–µ–º –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.",
    "company_4_details_general_data": "‚û§ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö UAT-—Ç–µ—Å—Ç–æ–≤ (python, Robot Framework) \n ‚û§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (TestRail, markdown) \n ‚û§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–æ–≤ \n ‚û§ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ (python)",
    "company_4_details_achievements_data": "÷ç –ü–µ—Ä–µ–≤–æ–¥ –≤ –≥–æ–ª–æ–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",

    "company_3_title_data": "–û–û–û ¬´–ù–æ—Ä–¥–∞–≤–∏–Ω–¥-–î—É–±–Ω–∞¬ª",
    "company_3_period_data": "–î–æ–ª–∂–Ω–æ—Å—Ç—å: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å—Ç–∞–∂–µ—Ä. \n –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –°–µ–Ω—Ç—è–±—Ä—å 2021 - –û–∫—Ç—è–±—Ä—å 2021.",
    "company_3_details_general_data": "‚û§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–û –¥–ª—è –∫–∞–º–µ—Ä –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è (smoke testing, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ, –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ, —Ä–µ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ) –Ω–∞ –û–° Debian –∏ –û–° Windows \n ‚û§ –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è unit —Ç–µ—Å—Ç–æ–≤ –Ω–∞ Python 2.7 (–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–∞ CORBA, omniORB) \n ‚û§ –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ Python 3 (–ø–∞—Ä—Å–µ—Ä—ã, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã) \n ‚û§ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–æ–≤ –∏ –º–µ—Ç–æ–¥–∏–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ \n ‚û§ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤ –≤ TestRail \n ‚û§ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ \n ‚û§ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–æ–≤ –æ –¥–µ—Ñ–µ–∫—Ç–∞—Ö –≤ Redmine.",

    "company_2_title_data": "OOO ¬´–°–º–∞—Ä—Ç—Å–æ—Ñ—Ç¬ª",
    "company_2_period_data": "–î–æ–ª–∂–Ω–æ—Å—Ç—å: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä—É—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å—Ç–∞–∂–µ—Ä.\n –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ê–≤–≥—É—Å—Ç 2021 - –°–µ–Ω—Ç—è–±—Ä—å 2021.",
    "company_2_details_general_data": "‚û§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ web-B2G –ø—Ä–æ–µ–∫—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ, —Ä–µ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ (API —Ç–µ—Å—Ç—ã –≤ Postman)) \n ‚û§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API (REST, SOAP) –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Swagger, Postman, SoapUI \n ‚û§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ web-–ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–∞–∫–∏–µ, –∫–∞–∫ Graylog, Sentry, OpenShift Web Console, DBeaver (–ë–î PostgreSQL) \n ‚û§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ XLM Schema –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ XMLSpy \n ‚û§ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ \n ‚û§ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–æ–≤ –≤ Jira \n ‚û§ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–æ—á–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",

    "company_1_title_data": "OOO ¬´–•–æ–ø–ø–µ—Ä –ò–¢¬ª",
    "company_1_period_data": "–î–æ–ª–∂–Ω–æ—Å—Ç—å: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≥—Ä—É–ø–ø—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ê–ø—Ä–µ–ª—å 2021 - –ê–≤–≥—É—Å—Ç 2021.",
    "company_1_details_general_data": "‚û§ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –°–∏—Å—Ç–µ–º (B2G, B2B, B2C) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º—ã—Ö —á–µ—Ä–µ–∑ Jenkins, –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (Zabbix, Grafana) \n ‚û§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–∫–∏ Jenkins-Zabbix \n ‚û§ –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º —Å –ò–° —ç—Å–∫–∞–ª–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ Jira, –ø—Ä–æ—Ç–æ–∫–æ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ Service Desk —Å–∏—Å—Ç–µ–º–µ \n ‚û§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –≤ Jenkins \n ‚û§ –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Postman \n ‚û§ –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ Python 3 (selenium, requests, urllib3)",

    "project_1_description_data": "–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å—Ç–∫–∏ –ø–æ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º—É –æ–±—Ä–∞–∑—Ü—É –Ω–∞ Django c –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.",
    "project_2_description_data": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞–º–∏ c –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ChatGPT.",
    "project_3_description_data": "–ë–æ—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ Steam.",
    "education_description_data": "2021-2023: –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç ¬´–î—É–±–Ω–∞¬ª, –ò–Ω—Å—Ç–∏—Ç—É—Ç –°–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ê–Ω–∞–ª–∏–∑–∞ –∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ò–°–ê–£).\n –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî ¬´–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ¬ª, –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ ¬´–¶–∏—Ñ—Ä–æ–≤—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö¬ª (c –æ—Ç–ª–∏—á–∏–µ–º).\n\n 2017-2021: –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç ¬´–î—É–±–Ω–∞¬ª, –§–∞–∫—É–ª—å—Ç–µ—Ç –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –ù–∞—É–∫ (–§–ï–ò–ù).\n  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî ¬´–≠–∫–æ–ª–æ–≥–∏—è –∏ –ø—Ä–∏—Ä–æ–¥–æ–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ¬ª, –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ ¬´–ì–µ–æ—ç–∫–æ–ª–æ–≥–∏—è¬ª.",
    "contact_description_data": "–†–∞–±–æ—á–∞—è –ø–æ—á—Ç–∞: RyzhenkovArt@yandex.ru \n –¢–µ–ª–µ–≥—Ä–∞–º–º: @RyzhenkovAD",

    "footer_data": "¬© 2025 –ê—Ä—Ç–µ–º –†—ã–∂–µ–Ω–∫–æ–≤. Bce –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã."
  }
}
